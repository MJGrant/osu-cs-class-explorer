{
  "CS340":{
    "fullName":"CS 340 - Introduction to Databases",
    "tips":[
      "Easy class, especially if you've had exposure to SQL before. Project can be time-consuming but isn't overly difficult. It helps to have some experience with HTML and PHP before taking this class.",
      "The final project is the only real assignment in the course. Everything else is fairly simple. Don't get lulled into a false sense of laziness. ",
      "Start your project early because it is pretty time consuming. Also dont feel bad if you're not understanding sql right off the bat. I didn't really understand it until I made my own queries with the project.",
      "The class is not terribly difficult with the ability to take quizzes unlimited number of times.  Just practice your queries early and often.  Play around with it a lot.  Start on your final project as soon as you feel comfortable as having it done 3 weeks before deadline was a huge boost to my time.",
      "Dont do the final project all at once. Spread it out in to chunks and get the free feedback.",
      "This is an easy class. 60% of your grade will be determined with the Final and Project so make sure to plan accordingly.",
      "Pretty straightforward class. The homework is pretty useful as you do get your hands dirty with MySQL. Final exam did not require us to use relational algebra or create diagrams. Could do better to have a midterm or something to prime you for the final exam but the class really winds down after week 5-6, even if you are programming your final project. \n\nRecommend pairing this with a harder class, unless you really want to make your final project look pretty.",
      "Very straightforward class.  You can take the quizzes as many times as you need to get 100%.  Assignments are straightforward.  Do not wait to start the project at the last minute, especially if you are not familiar with php or mySQL.",
      "Get started ahead of time on the final project, and get familiar with PHP and MySQL if you can before taking the course.  The final project is the only time consuming part of this course, otherwise it's pretty easy and straightforward.  You can additionally take the quizzes as many times as you'd like which helps pad your grade.",
      "Everyone says it but whether or not your get started early on your final project will determine if the class is \"totally doable part time\" or if it is \"almost no work until the last week where you literally die\". If you have previous SQL experience, you will likely find this easy to complete. I did not know any PHP going in and did not struggle to finish the final project at all. There are examples provided that basically outline how you can do all the tasks you need to do in PHP so you can easily learn the parts you need and apply them. ",
      "Start on the final project as soon as possible. It's not that difficult but it does takes time to do.",
      "Start the project as soon as you can. If you're using PHP, start learning the language first day of class.",
      "Do the stanford databases course.  If you understand that one, this one should be fine.  If you decide to stray from the guidelines of the final project, you better know what you are doing.  \n\nMode analytics also offers a decent SQL course on analytics.  Try it.  Honestly, watch lectures on 2x speed, watch and understand stanford databases course, and if you want to have a deeper understanding, read the book by elmasri.",
      "Once you get to joins make sure to practice them a lot to really understand how they work and to cement your understanding of foreign keys. For the final project start on it right away, the real coding videos the last couple of weeks are very beneficial. ",
      "Start early on the final project",
      "If the course still uses PHP for the final project, use it.  You can reuse the example code provided which makes it easier.",
      "Go through the lectures...they're boring (duh, they're lectures) but they're informative and will give you plenty from which to start your assignments/project. Start your project early, work on it in small bits when you finish each week's normal assignments...if you wait until you get a \"break\" from assignments to do it...you will be using time better spent studying for finals. ",
      "I spent more time setting up the client side of my final project than on the actual database parts. ",
      "Start the final project ASAP. Take the time to understand advanced SQL queries. ",
      "Take 290 first.  The final project for 340 is a lot easier if you've already done the final project for 290.",
      "Queries can be really weird. Practice and it makes it not so bad. If you haven't already taken 290 i suggest php for the final project. "
    ],
    "difficulty":[
      2,
      2,
      2,
      3,
      2,
      2,
      2,
      1,
      2,
      1,
      2,
      3,
      2,
      3,
      1,
      3,
      2,
      2,
      3,
      1,
      2,
      2,
      2
    ],
    "timeSpent":[
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours"
    ]
  },
  "CS261":{
    "fullName":"CS 261 - Data Structures",
    "tips":[
      "Watch the lectures before doing the worksheets and assignments, often part of the answers will be presented.",
      "Have the worksheets out while you watch the lectures and fill them in as you go. Use the group worksheet time to solidify your understanding.\n\n  ",
      "Tests are pretty hard, and what ultimately ruined my A.",
      "This was easier than I thought (got an A). You might want to save this to pair with the tough classes (e.g. I heard 325, 344)",
      "Assignments and worksheets take time, be careful and prepare well.  Debugging can be challenging due to longer programs.  Significant amount of material covered.  ",
      "The group work is mostly useless. The \"book\" for this class is a joke. I'll be planning to take a free online data structures course to brush up, because this class fell really short in terms of making me feel like I could go into an interview. The homework code feels hobbled together, and often contradicts itself. Be sure to keep current with the discussions on Piazza because many people will hash out the issues ahead of time.",
      "Redoing the worksheets was one of the most helpful things for me for studying for the exams",
      "Don't be afraid to use outside resources. The lecturer did a poor job of editing his videos. \n\nHe frequently misspeaks and has to clarify what he's saying, and it's almost always in the middle of a complicated concept. Goodbye, train of thought.",
      "Harder than 271, but doable. Weekly meetups with your group members. More coding needed than 271. Recommend you do all the worksheets and know them very well."
    ],
    "difficulty":[
      3,
      3,
      2,
      2,
      2,
      4,
      3,
      3,
      3,
      3,
      3,
      3,
      4
    ],
    "timeSpent":[
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours"
    ]
  },
  "CS271":{
    "fullName":"CS 271 - Computer Architecture & Assembly Language",
    "tips":[
      "Do NOT overlook the practice exercises provided with each lecture. If you can understand these without any help, you will be golden. ",
      "Proctored tests are very difficult. Assignments start off easy, but the last few can be very time consuming. Study the weekly self-checks and the summary exercises to do well on the proctored exams.",
      "In the summer session the final was a bit tricky. I went into the final with an 88.5 (I was so proud of my grade). I studied really hard, made a superb cheatsheet and felt pretty confident / ready (just wanted to get it over with) going into the final. The final is rigorous in the sense that there were way too many questions for the time allotted. And, (perhaps I was burned out) the wording of the questions were like riddles(literally contrapostives and vague wording left and right! ). I ended up getting a B- in the class, I am still really proud of my grade! ",
      "Exams are tough - don't underestimate them. Get a calculator that does the conversions for you. ",
      "Complete as much extra credit as you can. Start writing \"cheat sheets\" for each week and you'll have an easier time writing them for the midterm/final. I rushed through the weekly summaries and could have scored better. The lectures are sort of off with the assignments but things started to make a lot more sense to me after the 3rd week. Each point will count towards reducing your stress for the final week where there will be a programming assignment, weekly summary, quiz,  and final due so get the easy ones while you can :)",
      "Do really well on the programs and you don't need to stress about the exams much.  ",
      "Read the summary exercises, as they are pretty much exactly what is on the weekly summaries and quizzes.  Midterm was taken from quizzes.  Get a calculator that can translate back and forth between bases; you should know how to do it yourself, but you do NOT want to waste time calculating back and forth or risk making a mistake.",
      "Not as difficult as most people lead you on to believe.",
      "Watch all lectures and take a lot of notes and do the reading. Coding projects are not too bad but can be difficult if you get stuck since there is pretty much no information outside the book and whats covered in lecture. Midterm and Final are pretty intense but if you spend a lot of time making your note card, you will be OK",
      "The concepts are new to many people - if there's anything you don't completely understand, be sure to clear it up by asking questions on the forums or with the TAs, because you need to really understand the concepts to do well in the course.\n",
      "Do the extra credit if you can",
      "Ask the TA's for help. Not a lot of outside resources to rely on. ",
      "I actually enjoyed this class a lot. I thought it was really well taught. Start early on assignments, MASM is a beast. Look over the practice questions posted with the lectures. Quiz and summary exercise questions will be similar. Test questions will be as well, if not taken directly from the quizzes/summary exercises. Make good use of your note sheet for exams, there is a lot of information to know, but largely nothing surprising.",
      "Do all the self study worksheets, take quizzes 2x times, plan for last 2 assignment being hard",
      "Do not use a grace day until after the midterm, the assignments get quite a bit harder after that. Also, make sure you know the quiz material well, the midterm and final are pulled from those questions, which are quite a bit tougher than the weekly assessments. \nIf you have time make sure to do the extra credit. ",
      "This is a bruiser of a class if you fall behind. I ended up behind and focused solely on the programming assignments and ended up with a horrid grade. Don't fall behind. Watch the lectures 2-3 times and study hard for the mid-term and final. ",
      "The TAs feel like robots - expect no help there. Redfield very helpful as an instructor - if you have an issue, take it to him.  The summaries are easy, quizzes slightly more difficult - there are lots of opportunities to screw up.  The Midterm and Final were fairly difficult.  I did well (at least on the midterm, no final grade yet), but it took a lot of studying and there was some fairly obscure stuff, and a few 'gotchas' that really took understanding the nuances very well.  The programming wasn't bad, but some of the extra credit could be a little tricky.  A lot of people struggled with stuff, I would definitely start early.  The accelerated pace seemed a bit much once or twice, otherwise manageable.  It would be nice if they went back and adjusted the materials somewhat to correctly reference other assignments, as they were all swapped around.",
      "This course was awesome!  The design and organization were a breath of fresh air when compared to 162 / Rooker.  Everyone says this class is one of the hardest, but I did not find it to be that way.",
      "Starts off slower and ramps up (in difficulty) towards the end of the term. Work hard in the beginning of the term and take advantage of open note quizzes.",
      "Debugging and stepping through a program helped keep track of registers",
      "Well organized but midterm, final, and last few quizzes are tough.  Make sure to double-check your calculations carefully on these.",
      "This class is hard, but well structured and fair.",
      "Study study study.  Technically difficult but great class.",
      "Good class. "
    ],
    "difficulty":[
      4,
      4,
      4,
      4,
      4,
      2,
      4,
      4,
      2,
      2,
      5,
      4,
      3,
      3,
      4,
      4,
      3,
      4,
      5,
      5,
      4,
      4,
      3,
      3,
      2,
      4,
      5,
      4,
      2,
      4,
      3,
      2,
      3
    ],
    "timeSpent":[
      "6-12 hours",
      "6-12 hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours",
      "6-12 hours",
      "18+ hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours"
    ]
  },
  "CS225":{
    "fullName":"CS 225 - Discrete Structures in Computer Science",
    "tips":[
      "Brush up on your algebra if you haven't taken a math class in a while.",
      "Get ready for induction it's probably the most difficult topic in this class. And brush up on algebra it should be second nature.",
      "Just do all the work.",
      "Practice makes perfect",
      "She gives guides, use them.  Many of these questions will be on the tests.",
      "Make sure you're up on your algebra. Find a good youtube channel to help you through it. The reading and the videos could be confusing or not great for providing an easier way to understand what you're actually meant to be doing. \n\nGrading on homework seemed haphazard at best. Try to do the example problems in the book while you're reading and as many in the exercise sets as you can. ",
      "The study guides for exams are spot on, make sure to know everything on the study guide. Homework is the hardest difficulty. Quizzes are easier than homework. Exams are easier than quizzes. If you know homework and quiz questions really well you will breeze through the exams no sweat.",
      "Be prepared to use outside resources for better explanations.  The lectures are tied to the old book (Rosen) instead of the required book (Epp).",
      "This class really isn't that bad.  For a person coming in with a non stem background it could be a challenge because a lot of the concepts are...weird.  Especially when you get into recursion and Iterations.  Make use of the tutors, don't underestimate their ability and worth.",
      "Stack Overflow is very helpful",
      "Practice different problems in the book, not just the ones for the homework",
      "Bone up on your algebra before taking this class and make sure you're familiar with summations.",
      "This class isn't particularly difficult unless you struggle with grasping abstract concepts when it comes to logic. Mostly I found that it was time-consuming. While the work was not tough most of the time, doing all of the homework was tedious and took the better part of a weekend day to complete the homework and quiz for the week. I would suggest not procrastinating and spreading the work out during the week to make room for any other class you might be working on it or free time. ",
      "Don't panic during quizzes and exams.  ",
      "Do homeworks, and memorise quizzes for the tests ",
      "Reading the material before watching the lectures helped my understanding.",
      "Make sure to spend time understanding the homework problems. Try some similar problems with answers in the back of the book if you are struggling. Exams were very similar to practice exams/problems provided. ",
      "The material is not too difficult, but with other obligations you may find that you just need more time to let it really sink in.",
      "I had not taken a math class in 10+ years. I did terribly on ALEKS, but I went through most of the modules. I came out with a B+ and was thrilled. The quizzes and HW are basically the tests. Show all of your work-she is very generous on a couple points here and there. ",
      "Be comfortable with basic algebra and learn properties of integers and rational numbers. Overall, the grading in the class was pretty easy, but some people have a hard time with logic and proofs. Fortunately, everything is covered in the textbook, so if you can remember the proofs from there, you will probably be fine.",
      "Don't get behind on the reading. The textbook is your friend. Join slack!",
      "The hardest part of this course is proofs, especially by induction. Quiz and exam proof questions are frequently taken straight from the book.\n\nThe professor provides plenty of practice exams, and they are very closely aligned with the real exams.",
      "Not a very difficult class. Induction can be a difficult concept at first but there are plenty of outside resources and example problems. The grading is also very lenient on exams.",
      "Don't stress. Material is confusing but they grade fairly easily. Follow the study guides and practice tests and you'll be fine. ",
      "Do all the homework problems seriously. Samina takes so many exam questions from hwk and prior quizzes. Really just memorize how to do the problems and the exams should be okay. Also almost any assignment or quiz question can be found using the power of Google.",
      "Just do the homework and have it open when u take quizzes",
      "The class starts off fairly challenging but levels off towards the end. If you have never done proofs before, the class goes over direct proofs, proof by contraposition, by contradiction and by (weak and strong) induction. The proofs were the most challenging part for me.\n\nIf you have not taken any math classes in a while, I would suggest practicing some algebra using the ALEKS program. Things like factoring, combining like terms, properties of different number types and other math concepts are useful for proofs. \n\nIt is doable just put in the time. ",
      "Refresh you algebra.",
      "I had a very interesting relationship with this class. Sometimes I loved it, other times I hated it. Looking back, I really do enjoy the material. I didn't find that this class get harder/easier after a certain point in the course - I think it remained at the same level of difficulty for the most part. I read somewhere that induction is the hardest part of the course, but unfortunately that was not the case for me and many others in the class. Permutation and combinations were very challenging (2nd to last week).\n\nYou'll find that most weeks are challenging since everything is new stuff but then you look back and study for the midterm/final and you're a pro at all the stuff before. Induction becomes fairly simple after a few weeks of letting it sit in your head, so don't sweat it if it's taking you a while to grasp it immediately. \n\nRegarding the lectures, for some weeks they were good and others they weren't. I found them more useful in the beginning , very weak during the middle, and better the last weeks. You'd think the practice problems they go over in the lectures would help you in the HW but for most weeks they don't. Apparently the lectures were made while they were using another textbook. Be prepared to watch youtube videos - plenty of great content on there. TrevTutor was especially helpful for me. ",
      "Some weeks I spent less than 2~3 hours on assignments, some weeks you had to spend a little more, thus averaging somewhere between 6 and 10 hours.  I pulled through due to prior math knowledge and doing quite a lot of ALEKS prep before the course.  This class is one where if you took it by itself, it would seem like it was too slow or too little.  However, a solid time investment should get you a 100% final grade.  The grading is very lenient, just make sure you do the work and put in a little genuine effort.  People made a big deal about induction, but it wasn't that bad.  Weak induction is pretty easy, but there are some tricky things you can do with algebra that aren't taught very well.  Strong induction is probably one of the more difficult sections in the course, but it isn't that bad.  Put in a few extra hours and you will be fine.  Definitely use some outside resources to supplement the book.",
      "If you have taken an intro course before, you can skip/skim over the lectures/readings. A lot of the exam questions come from the textbook, so review it before the test.",
      "Make sure you know Induction!",
      "Certain topics are challenging later on in the quarter. Read the book. That is your best resource. They grade easily and give a lot of partial credit ",
      "Use the answer keys from the quizzes for how to format your answers. It can be a little confusing how to format the homework based off of the lectures and book, but you get a demo quiz every week whose answers will make it clear on how you should format everything.\n\nMost people struggle a little with induction, but the trickiest parts of induction just involve manipulating equations with algebra. It's definitely the hardest homework, but don't psych yourself out over it and you'll figure it out. ",
      "Do all the homeworks, even if they aren't worth a whole lot, because it will help you understand how to approach the quizzes. This class is all about recognizing patterns. I'd say this class is easy if you have decent algebra skills and are good at memorization. This class is definitely doable otherwise, as all the math/logic tools you need to approach most questions are taught/reviewed during the course.",
      "I hadn't taken a math class in 10 years and I struggled. Ended up with an A, but it took a lot of effort. Use the study guides for the tests and review all of the questions listed. If you understand those, you'll do just fine.",
      "Brush up on your algebra before taking this. There are some really complicated algebraic operations, especially with the strong induction.",
      "Don't give up if you don't understand a concept at first exposure.  I'd often have to watch the lectures and read the book a couple times to let the information really sink in.  After you have a decent understanding, most problems are fairly straightforward.\n\nGrading on the quizzes and exams is very fair, so be sure to show work or exhibit some level of understanding even if you can't get a final answer that you believe is correct.\n\nThe practice quizzes and exams are extremely similar to the actual versions, so use those as guides when preparing.",
      "This is a logic course, not so much a math course. Review basic algebra and you'll be ok",
      "Get a chegg.com subscription for help with answers. Do more than just the assigned homework questions: do the practice quizzes, do the previous homework(s), do the example problems that have answers in the back of the book. The midterm is harder than the final. Review fraction multiplication, division, addition. Class gets hard around week 4, 5, then really calms down around week 6, 7 and 10. YouTube has better video tutorials than the class. ",
      "I had to do extra examples each week to prepare myself for quizzes and exams. If you do well in assignments and quizzes, exams will be easy."
    ],
    "difficulty":[
      3,
      3,
      2,
      1,
      4,
      3,
      4,
      4,
      1,
      2,
      2,
      3,
      1,
      1,
      2,
      3,
      3,
      2,
      2,
      3,
      4,
      1,
      2,
      3,
      2,
      3,
      4,
      4,
      4,
      3,
      1,
      2,
      2,
      2,
      3,
      2,
      4,
      4,
      4,
      2,
      3,
      2,
      1,
      4,
      2,
      3,
      2,
      2,
      3,
      2,
      3,
      2,
      2,
      3,
      2
    ],
    "timeSpent":[
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "18+ hours",
      "13-18 hours",
      "13-18 hours",
      "13-18 hours",
      "0-5 hours",
      "0-5 hours",
      "18+ hours",
      "13-18 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "18+ hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "18+ hours"
    ]
  },
  "CS161":{
    "fullName":"CS 161 - Intro to Computer Science I",
    "tips":[
      "Ideally come into 161 with prior programming experience.  If not, be sure to do the readings and watch the lectures.  Doing the programming challenges at the end of each chapter in addition to the homework really helps with solidifying the material as well.",
      "My advice would be more relevant for students coming in with programming experience -- don't underestimate the first exam! It sounds silly, but without intending it, I had become really used to letting the compiler fix my errors for me. When it came time to do the test, where no compiler was there to catch my stupid errors for me, I was ill prepared and did much worse than expected.",
      "Get ahead on the readings. Put the time in to understand the basics",
      "The first few weeks start off really easy and then it starts escalating with classes, arrays and pointers. Make sure you get the fundamentals down really well as everything builds upon the previous unit. Take time designing what your code will look like before jumping into the actual coding! ",
      "Take an intro to programming class on EdX or Coursera in any language and you'll be set.",
      "Pay attention to details.  Grading is done by running scripts.  Points will be lost for simple mistakes like extra spaces etc.",
      "I would say this class is medium difficulty (fairly easy if you have previous programming experience, possibly difficult if you don't).  I don't feel the class is too bad, but there is a lot of info thrown at you, and you need to know a lot.  The projects ramp up in difficulty, with a few easier ones here and there.  If you are having trouble, you really need to start them early as lots of people struggle right up to the end - but you never see many people asking questions earlier in the week.\n\nThe first exam probably differs a lot from what people expect from a computer science exam, and a lot of people did poorly (learn how to trace code, learn the unusual cases and what type of errors there are).  Actually messing with the errors the and warnings the book gives might be good practice. The second exam is a bit more conventional.\n\nThe professor's communication is decent, but he neglects to fully answer questions sometimes, and frequently revises assignment requirements halfway through (again, get started early).  He is also very inflexible considering this is a course partly aimed at people pursuing a second career.\n\nThe book is decent, but has lots of errors.  The course notes are helpful, but also have errors.  The video lectures were practically unwatchable to me (accent, voice, pacing).\n\n\n",
      "Plan to have to practice the material on your own. Each new concept should be practiced thoroughly until you have mastery of it BEFORE attempting the assignments. This will allow you to attack the problem with tools you understand instead of learning as you go. Don't be afraid to break things and then go back a fix it. I restructured my bigger programs a couple times each because they sucked my first go through.",
      "Class was a bit unorganized - lectures didn't align to the reading very well.  If you're new to programming,  don't want until due dates to compile your assignments on the school server.  Your local environment may work fine despite underlying issues.  ",
      "Stay on top of homework. it is critical",
      "Try to get ahead on readings before the course begins. Try to code as many of the review questions for each chapter as you can. Pay attention to the lecture notes, in addition to the textbook.",
      "Read the book and practice writing lots of code both in an ide and away from the computer.",
      "The midterm and final were decent. You need to be able to hand trace code otherwise you'll have a rough time on the exams. The last two coding assignments were challenging, everything else was pretty easy. ",
      "For the exams practice code tracing, the theoretical stuff is way less important. Score as high as you can on the homeworks so you have wiggle room for the exams. ",
      "Don't anticipate much feedback from TAs.  If you have time, I'd recommend doing the practice program assignments in the book. Definitely practice code tracing before the exams, that's really most of the exams.",
      "Read the book and look at example code ",
      "Early Objects is a great textbook. Take time to do the reading and do a great job on assignments and you will have a good grasp of the material, which will buy you room to miss a few tricky questions on the tests. I did have some prior programming experience so the material came easier to me, as there was less completely new material.",
      "Do the practice problems in the textbook",
      "Spend extra time learning the pointers.  These will be a major component of 162.  The workload in this course is far less than 162, so make sure you use the extra time to really understand the topics, peruse chapter 11 in Gaddis, and dive head first into double pointers (indirection.)\n\n161 tests are basically T/F and code tracing. Be prepared to trace code without a computer/compiler.",
      "You should be able to get 100 on all programming assignments if your code works. Read the book-it is pretty good. Watch Bucky's videos for stuff that doesn't click. Alcon is great on Piazza(very dry, don't let this discourage you). If you know anything about any programming language, you should ace this course. ",
      "Keep ahead in the reading, practice extra problems in checkpoints and the review questions, learn pointers very well. ",
      "The programming assignments were not bad or difficult, however Alcons midterm and final were seriously on another level.  For the midterm the whole class , including myself thought we did well, however our grade showed otherwise. Make sure you hand trace and practice writing code, and take some time to read the test questions, dont just breeze through them.  \n\nThe only reason why I am giving the class a 4 rating is because of the   exams.  "
    ],
    "difficulty":[
      4,
      3,
      3,
      4,
      1,
      4,
      2,
      3,
      4,
      4,
      4,
      3,
      1,
      4,
      3,
      1,
      2,
      1,
      3,
      3,
      3,
      2,
      3,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      2,
      3,
      4
    ],
    "timeSpent":[
      "18+ hours",
      "6-12 hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "13-18 hours",
      "18+ hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "18+ hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours"
    ]
  },
  "CS352":{
    "fullName":"CS 352 - Introduction to Usability Engineering",
    "tips":[
      "A good group/group leader makes this class much easier.",
      "This class is super boring and a chore to do the projects/assignments. Just pray you end up with a good leader and group.",
      "Be active in your group. Use slack to communicate.",
      "save this class for a known hard class.  Known hard classes are 290/325/372/and potentially 496.\n",
      "save this class for a known hard class.  Known hard classes are 290/325/372/and potentially 496.\n",
      "Make sure you put some thought and effort into your group project and follow directions, as grading on that can get a little picky. It's easy to slack because the rest of the class doesn't require much work or complex thinking. Watch out for trick questions on tests and quizzes.",
      "Don't wait until the last minute for the group assignments.",
      "Don't be dick to your group mates. Be a good member and get your shit done. The class is easy, as is the project. You just have to slog through it (if you find it as painfully boring as I did, you might enjoy it).",
      "The key to this course is having a group where everyone participates, if you have a good group you shouldn't have to spend more than 4-5 hours a week on the material. ",
      "Stay on top of the schedule for the project parts and reference the examples provided in the class resources section in Canvas. ",
      "Be cooperative and communicate with your group.  There is no programming and the content does not present any real challenge, so do not become apathetic toward the individual assignments.",
      "This class has a lot of busy work but is also not difficult. Be prepared to do a lot of work if you're stuck with horrible teammates.",
      "The tests test your ability to create a notecard with answers to the weekly objectives, not your understanding of the concepts.",
      "Make sure to tackle all of the group assignments at least a few days before they are due!",
      "If you're looking for more of a \"software engineering\" experience out of this CS program, then this class will feel like an idiotic waste of your time every step of the way. But take heart: there are actually a few useful nuggets sprinkled here and there.",
      "Too much group work. The most difficult part of this class is trying to stay interested. I program back end stuff at work, have no interest in design, and am frustrated I had to take this course.",
      "This is a good companion to a demanding course. It's a waste of time otherwise. 90% of what you'll need to know is in the videos. Look at the example assignments when putting together your group projects.",
      "Took course during redesign period. Course itself is very easy. If your group cooperates it's best to split up each submission to minimize the workload for any one person. Final, no cheat sheet. No midterm. 4-5 short, timed quizzes which can be taken 2x",
      "This course is a bit annoying because there is a lot of subjectivity when grading. Make sure to participate more than you think you should in the discussions or be prepared to be counted off. ",
      "Set up a schedule with your group of times to meet. Breakup all the portions of the assignment so that everyone knows what they are responsible for. Communication is key. ",
      "1)Avoid this course even if you are interested in UX/UI. 2)If you must take it, I hope you are assigned a good group. I got insanely lucky and was put in a group with the only other person I know personally in the program, plus 2 other really great group members. If you have that you'll be golden and the class should take no more than 4 hours a week at a stretch. 3)The final is short answer & multiple choice on the reading and lectures...and it's 25% of your grade. ",
      "Just make sure you participate in the  discussion groups you are assigned.\nMost assignments are writing papers, which are to be done by group.\n\nMake sure you are on the same page with all your group members.\n\n",
      "This class isn't conceptually difficult, but the A isn't guaranteed. The bulk of your grade comes from a large project with multiple turn ins which you complete with an assigned group. Don't wait till the last minute to finish the project submissions, some require a good amount of work and writing. The final versions of your UI prototype need to be interactive (clickable), the examples are given as a PDF document containing intradocument links. Late in the term (it was already too late) we were told we had the option to create our prototypes using HTML/CSS (nothing fancy because it must run locally) and submit a zip file with all our pages instead of a PDF. I highly highly suggest doing this if anybody in your group knows HTML/CSS. You can host your prototype from your own ONID or any free service for testing/project galleries and just submit the zipped files for the project turn ins. Dealing with a hyperlinked PDF is  frustrating!"
    ],
    "difficulty":[
      1,
      2,
      2,
      4,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      1,
      3,
      3,
      2,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2
    ],
    "timeSpent":[
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "13-18 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours"
    ]
  },
  "CS290":{
    "fullName":"CS 290 - Web Development",
    "tips":[
      "The old version was brutal. Be glad it's been changed. ",
      "If you can find time, create little projects on the side to help reinforce the concepts. From what I hear, it's a lot better than past quarters but there is still a lot of material to cover. Didn't use the book a lot, mostly did searches for online documentation and questions. ",
      "Find other resources outside of the class to learn javascript and node.js. I signed up for a udemy course (Rob Percival Build 15 Websites) since it was only $10 when I purchased. The assignments aren't too difficult but definitely get started on them early. ",
      "The lectures were way more useful than the book.  Don't get lulled into a false sense of security the first few weeks. It starts off slow,  but the last few weeks were rough. Make sure to understand each new concept,  because the final homework is fairly comprehensive. ",
      "Since the class starts off slow, dig into some extra JavaScript resources on the side, that way you're better prepared when the class ramps up later in the quarter.",
      "You must do outside exercises and practice to succeed in this course. The lectures alone will not be enough to really understand the material. Make sure you fully understand a concept before moving on to the next week's material. Do not just copy and paste code, as this will make things very hard for you later on. ",
      "Course is not terribly difficult until the final project and the final exam.   Study the details.  Exam is mostly Javascript trivia, be sure you know AJAX html requests backwards and forwards. Lots of 'select all that apply'.  Did worse on this final than CS 261 & 271...",
      "There is a lot of group work, so anything you can do to make sure your group works well together, with everyone happily contributing, will make this class (even) easier.",
      "The first few weeks are cake - the last few weeks are time-consuming and the content is very detailed and complex (for me). Work ahead if you can (modules may not be available ahead of time), and, if you have extra time, learn about node.js and express ahead of time. The two recommended texts are useful, and the JavaScript text 'Eloquent JS' is available online for free.",
      "Practice is key in this class.",
      "It's easy to get A's on all of the assignments (the last couple are harder) and in the class doing the bare minimum, but you won't learn much. If you are interested in web dev, you'll have to put in extra work than what it required. ",
      "It's been said before, but the course is seriously weighted to the last few weeks so after mid-term, make sure to stay on top of your other classes.  The final is not a gimme, but it is not difficult to go in to it with nearly full marks from the rest of the assignments.",
      "Extremely backloaded workload with the database assignment coming right after the how-to guide. Minimal engagement from the instructor, so Slack is probably your best bet for getting help.",
      "Do you assignments a week early so you can get TAs to help you through any bugs you encounter. Look up an Express tutorial on youtube",
      "Really pretty easy. I found the textbook to be boring and hard to focus on. Last assignment requires a synthesis of server side and client side coding.",
      "If you have ANY prior webdev experience, ANY at all, this class is a breeze. If you're thinking about getting an override to take it with CS162, I'd say do it because it was a nice, low-effort class that enabled me to focus more time on CS162.",
      "Some topics are explained poorly or not at all. Get started on How-To and database projects ASAP. Course is extremely back-loaded."
    ],
    "difficulty":[
      5,
      3,
      2,
      4,
      4,
      4,
      3,
      1,
      4,
      2,
      4,
      2,
      2,
      3,
      3,
      3,
      1,
      3
    ],
    "timeSpent":[
      "18+ hours",
      "6-12 hours",
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours"
    ]
  },
  "CS162":{
    "fullName":"CS 162 - Intro to Computer Science II",
    "tips":[
      "Work hard, work early! Rooker is a weird guy, things are always vague and confusing. If you're confident in your abilities, starting late can be an advantage because you have the benefit of everyone else clearing up the confusion. But, you need to be confident that you'll finish on time. The group work sucks, and the groups are too large for the amount of work that is given.",
      "Pace yourself.  I feel as if I learned a lot, but most of the learning came from Stack Flow and You Tube Videos which is both a good and bad thing and probably a contributor to why you had to spend a lot of extra time on this course.",
      "- Start early and often on assignments.\n- Make sure you understand pointers (there is a group collaboration review of these but that is halfway through the quarter. You start using pointers immediately.)\n- Ask questions when you have them. Many assignments/labs have misinformation in the instructions. (i.e. left over from previous quarter or just plain wrong)\n- Watch lectures and read chapter before starting on homework\n- Always check your code for memory leaks using valgrind, you lose quite a few points if you have leaks.\n- Don't panic. Meditate. :)",
      "Read chapter 11 gaddis before starting this class. Will be a monster, monster help. \n\n-Get started on the Labs as soon as they're assigned. Even if it looks like Egyptian, just get started on it. Write out some pseudocode, design doc, whatever. \n\n-Write C++ every day. Every damn day. Even if it's a int main with a while loop asking for input. Just something to keep you going and your brain alive. \n\n-Comment your code as you go (in terms of function headers and file headers). Will save alot of time. \n\n-Get started on the Doodlebugs assignment as soon as it opens. This is when the class generally shits their pants. \n\n-Don't be overwhelmed by the group work, just try and contribute early on. \n\n-Take the design documents seriously. They can really help.\n\n-Pray to fuck you don't get assigned Niza Volair as a TA. Because she is literally a Nazi. \n\n-Pray you to get a badass, cool TA like Harlan Waldorp, who grades on the important stuff and not the ass kissing factors (ie, writing a 15 page design document). \n\n-In general this class seems fairly TA-dependent, which is quite unfortunate. \n\n",
      "Complete each requirement one step at a time and make sure it works before moving on to the next.  This way you won't run into big problems and have to start over from scratch.  You'll also at least have parts of the assignments complete to be able to get patrial credit if you are unable to get everything to work as it should.  Start assignments early.",
      "Summer course was rough. Topics are not tough to learn, just make sure you have a good grasp of pointers. Just the condensed amount of work in the short time frame made for no weekends/social life to complete the assignments/labs and study for tests each week. I was easily spending 30 hours per week to get an A.",
      "Larger labs and projects. Make sure you understand pointers and how memory leaks work.",
      "Pointers pointers pointers. This class is heavy on pointers so be sure to know your pointers.",
      "Start early, read Piazza daily, and don't be afraid to Google. This class WILL take you more time than you're used to from 161. Also - the first few weeks are the worst, really make sure you've set aside ample time for those first few weeks.",
      "Review pointers A LOT. You will need to figure out a menu function, input validation function and makefile in week 1 so if you can learn those in advance - do so!",
      "Try not to procrastinate. The work isn't terribly difficult, it's just constant and there's a lot of it. The first two weeks ramp up really fast! If you feel like dropping, wait it out. It seemed like things got a bit easier after getting through those initial weeks."
    ],
    "difficulty":[
      4,
      5,
      4,
      3,
      3,
      4,
      4,
      2,
      4,
      3,
      4,
      5,
      5,
      4,
      4,
      2
    ],
    "timeSpent":[
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "18+ hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours"
    ]
  },
  "CS361":{
    "fullName":"CS 361 - Software Engineering I",
    "tips":[
      "Take control of your group.  The second project took way more time than it should of because a couple of people became foremen rather than teammates. ",
      "Pair with a hard class.",
      "Don't skip the self-check exercises. The quizzes and parts of the final were directly from them.",
      "This class is largely focused on group work.  Be a good group member, and it's an easy A.",
      "Pick a vision statement for Project A that you like, and pick a vision statement for Project B you could see yourself actually writing. If you end up as a client (a group picks your statement) don't be a dick by being picky and demanding. Know that Project B is a class assignment about learning Agile, so define the goal end product but don't get demanding on platform or tech. If you ask for a mobile app but the group doesn't know how to make one, they can't spend time following the agile process when they're frantically trying to learn enough about mobile dev in a 2-3 week period to make your stupid app. 40% of project B is delivering \"substantial working code\". Don't be a dick.",
      "Estimating time spent for this class is difficult.  I spent minimal time on this until the group project at the end. Be adamant that your group uses languages/frameworks that the majority are comfortable with.",
      "Coordinating the group projects can be difficult. Make sure to communicate early and often. No Midterm. Final was easy if you make sure to study the starred slides. ",
      "The second project can be far more time consuming than the first, so plan accordingly!",
      "Drink a lot of alcohol while you're taking this course because it'll help ease the pain that you're dropping almost $2,000 for such a shitty course. ",
      "The time estimate given is more for Project B than for Project A.  Your team for Project B needs to be able to communicate since you work in pairs coding the assignment, so when one pair is done the next pair needs to know what the first one did.",
      "Do very well on the homework and you won't have to worry about the final. I got an A by getting As on homework and only a 60% on the final. I don't test well, so I always try to make up for it with homework.",
      "The first half of the class doesn't have much activity, things ramp up a little in the second half of the class.  You will likely be doing a web based project, for Project B so having completed 290 and 340 before taking this class is a good idea.  Be prepared though if Rooker is teaching it.   Here are some things to watch out for:\nDiscussions - Rooker expects you to comment regularly in the discussions he posts for credit, so put a few comments in every couple of days\nGroup Evaluations - put comments in for every thing, and don't forget to evaluate the customer.",
      "Take control of your group as soon as it is assigned.  Initiation communication on Google Hangouts (set up a group chat).  Set up file structure in Google Drive.  Do not leave anything to chance.  Drive the performance of your team.  Ask them why they've been radio silent for 6 days.  Badger them to complete their tasks.  Don't be shy.\n\nReview the starred slides weekly for just a few minutes.  By the time the final comes around you'll be ready to go.",
      "Be very active in trying to find requirements because the class is not formatted well. Make sure to read email for random updates from the professor.",
      "It's Rooker, so be prepared to try to predict what he wants. Assume anything mentioned, either in passing or on a requirements doc, is a requirement. Participate regularly in the group discussions, or you will lose points. Be a good group member. ",
      "The first project is not too bad. Make sure everyone is on board with the IDE, timelines, and coding for the second project. Don't overcomplicate it.\n\nRooker is very hands off of this class and discussions are graded sporadically. ",
      "This class is a joke. Just make sure you get ALL the requirements and follow them exactly. Do not deviate in the slightest and you should do well."
    ],
    "difficulty":[
      2,
      1,
      1,
      1,
      1,
      2,
      3,
      1,
      2,
      1,
      1,
      3,
      3,
      1,
      2,
      1,
      2,
      3,
      2,
      1
    ],
    "timeSpent":[
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "13-18 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "0-5 hours",
      "0-5 hours"
    ]
  },
  "CS325":{
    "fullName":"CS 325 - Analysis of Algorithms",
    "tips":[
      "Skip all the lectures and office hours held by the prof. Get all of your lectures from the MIT OCW material. Skim the book, then go to YouTube to fill in the gaps. Don't use Python for the TSP project. If you use the Subtract and Conquer/\"Muster\" method in place of Iteration for solving recurrences, you won't be marked down on tests.",
      "The first 5 weeks are incredibly hard. The tests are hard. The homework's hard. The projects aren't too bad. I recommend using Python for most of the projects. And the lectures are pretty bad; use your google-fu.",
      "Highly mathematical...depending who you are that could be a very good or bad thing.  ",
      "The first 3 weeks( of the 10 ) are the hardest. Find a study group to help learn the hard material with and double check your homework answers with.",
      "Watch lectures on 2x speed. Use Google, the book is standard in programs across the country so it's easy to find related material presented in different ways to get a better understanding. Find group members if possible, it'll be more likely everyone participates which makes the four projects a lot easier.",
      "Projects are graded generously but take the most time so I would put less effort into those and more effort into the homework to the point you can do it without looking anything up.",
      "The 2nd half of the course is harder than the first. I also found the office hours more helpful than the lectures. The book is hard to read but if you fully understand those you're golden.",
      "Try to write pseudo code for all the algorithms don't lean on your group or you'll do poorly on the tests, ask your team for help if you don't understand an algorithm.",
      "Don't skip over anything. Even the thing you think is so obvious and won't be on the final, could be.\nStart early on the videos each week and watch them at 1.5-2x speed (a suggestion from prior students that really helped!).  They're long and speeding them up almost makes them sound normal speed.  Attend the review sessions, office hours if you can. Some weren't helpful, but others were - especially the midterm and final study sessions.  \nThe textbook was helpful in the beginning, but not so much later on. Still a good resource to have though -- (note:  it's available online here and there..). \nJust relax and really try to enjoy the class. It wasn't as bad as everyone made it sound. Try to find real world applications for the concepts you're learning - that helped me a lot.  Good luck!",
      "Study study study. Everything builds on each other, so if you don't get something from the previous week it will be difficult to catch up. The homework takes several hours. Start early. The projects take several hours. Start early. Make sure you actually understand the concepts. If you look up an answer and say 'oh that makes sense', make sure you know why it makes sense. The class lectures are pretty terrible so try MIT, geeksforgeeks, etc for content. The best way I found to learn the material is do as many example problems as possible. Reading is good but I found it took too much time and I didn't get much out of it. I't's a tough class but I made it through and so can you!",
      "The lecture/recitation videos from MIT's two algorithms courses will be more useful than the ones done by OSU.",
      "Build rapport with your project group if you can. My project group was more helpful for questions than the hw groups were. The hw groups felt like one more hoop to jump through, notably because of the requirement to post multiple times over multiple days for each homework.\n\nLastly: python is your friend. In 261 I enjoyed using C, but python was so smooth for the projects, even with feeling fuzzy about the language at first.",
      "Study as much as you possibly can. Unless you are naturally gifted in the material its going to take some work. That said use as many outside resources as possible (search MIT, Cal Tech, etc) as the actual course content is lacking.",
      "Programming the algorithms up in Python and trying them out helped my understanding a lot.",
      "Focus on collecting as many points as you can from the HWs/Discussions/Projects. They add up quickly so that you don't need to do crazy well on the exams to pass the class.",
      "Overall very fair, son't be intimidated by the first 2 weeks",
      "Find outside sources. I learned very little from the course lectures. Download a chrome plugin to listen to the lectures with 3x speed. She speaks very slowly... Only watch the lectures to get an idea of what to look up/learn yourself and/or see if she mentions anything regarding exams or group work. I did not spend much time on this course compared to other, but I was flying by the seat of my pants the entire term. "
    ],
    "difficulty":[
      5,
      5,
      4,
      4,
      3,
      5,
      4,
      4,
      4,
      3,
      3,
      5,
      3,
      3,
      5,
      5,
      4,
      4,
      4
    ],
    "timeSpent":[
      "18+ hours",
      "13-18 hours",
      "6-12 hours",
      "18+ hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "18+ hours",
      "13-18 hours",
      "13-18 hours",
      "6-12 hours",
      "13-18 hours",
      "18+ hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours"
    ]
  },
  "CS496":{
    "fullName":"CS 496 - Mobile and Cloud Software Development",
    "tips":[
      "Start early and do not waste time.  Seriously this stuff will take you longer than you think if you don't have prior experience.  \n\nI'm a very successful student in this program and this is one of the most intensive courses I've taken in terms of project requirements and self learning.  My family feels like I've been gone for a few months because I've spent multiple evenings and weekends shut-in to my office.\n\nPrepare to teach yourself.  A lot.  Even you have a question for the instructor, don't wait to ask it.  He sometimes can take days to answer on Piazza.  Send emails.  This feels less like a \"learn-about-a-topic\" course and more like a \"prepare-you-for-the-real-world\" course.\n\nGood course with good \"real-world\" usefulness but not easy like many others.",
      "It's a Wolford course, so the lectures are insufficient and sometimes near-worthless. Class is heavily front-loaded so try to keep up with everything for the first few weeks. Get as early of a start on the project as possible and you should be fine.",
      "Project 1: Website, (choose GAE if your not familiar with creating a DB; use this all term)\nProject 2: Start thinking about a mobile application you want to develop that incorporates a NoSQL DB and relations between objects in your DB, (i.e. One object is a Book, another is an Author, and another is a reader. An author can write many books, a reader can read many books).\nProject 3-Final: Build on your idea through the term.\n\nWolford doesn't tell you any of this early on and it royally screwed me as the term went on. Lots of long nights.\n\nAre you a strong coder in python, javaqscript, and HTML? Cool, this class should be fun and not too bad, (just time consuming). If you're none of the above, (like myself), prepare for a stressful term. Totally doable as the TA's are generally awesome and lenient in their grading. As long as you hit all the requirements for the assignment, they'll give you full credit, (you have up to a day to turn it in after the assignment is due for up to 80%).\n\nOne issue is that some of the requirements aren't always clear. Once again, TA's are lenient. I turned in one assignment where I didn't meet the requirements, (misinterpreted what Wolford wanted), and the TA let me turn in the assignment again after he had graded it when I brought up my concerns. Totally fair.\n\nSpeaking of Wolford, you'll find his lectures are totally useless aside from scrapping code together for your DB. He basically just talks about what his code does. That's it. Be prepared to do a lot of your own research.\n\nPros: you end up learning a lot. \nCons: you're paying ~$1k to teach yourself how to create a mobile application. ",
      "All the assignments can be piggy backed on top of each other, keep this in mind on day 1. The last half of the class has the most work, start on stuff early.  ",
      "Start looking into cloud and mobile platforms well before class starts.",
      "Do not pick iOS unless you are fluent in Objective-C.  Be realistic, even seasoned developers need weeks to ram up in Objective-C, and you just don't have that kind of time while taken other classes.  The instructor should have warn students, who have no monile experience, off iOS. Other then that, I think this is a great class.",
      "I took it as a summer class, so the pacing might be different vs a normal quarter. The pacing is great, until the last 2 weeks. The last 2 weeks prepare to get wrecked, there were 2 projects and a paper due. It's a very open do whatever you want however you want style class, so if you don't like freedom and need lots of instruction, you might have a hard time in this class. Additionally, I have been playing around making android apps for 6+ months when I took this class, so I didn't have to learn as much.",
      "Don't bother with Wolford's lectures unless you want to use Python/GAE/Windows phone (WHY?!?!) .  I used Ruby on Rails, Heroku, and iOS Swift and it was a lot of work but totally doable.  Make one project out of your assignments rather than a new project for each assignment and you'll have your final project mostly done! ",
      "Not a difficult nor easy course. Just very time consuming so plan accordingly. ",
      "This one is a sneaky-lot of work IMO. I learned a lot, but it's also currently light on the lessons so you need to dig into some good self learning. I think it's being redesigned tho so stay tuned...",
      "I did the restructured version of the class. Class was split into half cloud half android programming. All but one of the home works were project based. As long as you stay on top of the material the class is pretty easy."
    ],
    "difficulty":[
      4,
      3,
      4,
      2,
      4,
      3,
      4,
      4,
      2,
      2,
      3,
      3,
      2
    ],
    "timeSpent":[
      "18+ hours",
      "13-18 hours",
      "13-18 hours",
      "18+ hours",
      "6-12 hours",
      "18+ hours",
      "18+ hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours",
      "18+ hours",
      "18+ hours",
      "6-12 hours"
    ]
  },
  "CS362":{
    "fullName":"CS 362 - Software Engineering II",
    "tips":[
      "Professor is difficult to understand. Little useful feedback. Overall easy. ",
      "Stupid. If you take this class late in the program you'll likely learn very little. Review your C syntax as most of your coding will be in C up until the final assignment which will all the sudden be in Java and require Junit. Our program doesn't expose us to Java at any point so read up on it if you're unfamiliar with it, and read up on Junit as well.\nTotally easy class though. I lost only 5 points on the midterm.",
      "Bring a pillow.  This one is a snoozer.  You'd have to be a complete retard to not get an A in this class.  There is one group project that is hardly enough work for a group.  You'll work mostly in C but a bit in Java/Eclipse so brush up on those if you haven't worked with them in a while.  Or don't.  You'll have plenty of extra time to brush up during the course.",
      "Easy class. Was not very useful, and I am not confident at all about testing despite getting an A. ",
      "It starts off strong with interesting and time consuming projects on testing. Then  eases up in the second half. Would pair well with a course that's back-heavy",
      "Course organization is dismal and the assignments are barely graded.",
      "Try to come in with a group already formed.  The course is mostly in C, writing test cases for various cards and functions for the game Dominion, written in C.  The code base is insanely buggy.  Keep your local repo handy, because the entire class uses the same repo, so you can imagine how many times stuff gets overwritten.  The final project is writing test cases in very simple Java.  I didn't study Java at all and did well.  Some of the individual assignments (which are in C) are long and tedious.",
      "Fund a good group and don't be too ambitious.",
      "It's not difficult, but the assignments can take some time if you want to do them well.",
      "Github familiarity is a must. Learning JUnit, Eclipse, gdb, gcov, and how to write basic unit tests will be helpful if you want to prepare. Otherwise, light to mid amount of work. Course content is not too difficult.  "
    ],
    "difficulty":[
      2,
      1,
      1,
      1,
      2,
      1,
      2,
      4,
      2,
      3
    ],
    "timeSpent":[
      "6-12 hours",
      "0-5 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours"
    ]
  },
  "CS372":{
    "fullName":"CS 372 - Intro to Computer Networks",
    "tips":[
      "Socket programming coursework is challenging. Otherwise on par with average coursework. ",
      "Class is setup like 271. Weekly summaries, weekly graded discussions, 2 quizzes, 2 programs, 5 labs, midterm, final. All interesting stuff. The labs use Wireshark which is easy to install and use. The 2 programs are fun but take some time. There is the option to use Java, Python, C or C++ for the 2 programs which is nice to be able to code in something other than C! ",
      "Take 344 first--it makes this class much easier.",
      "Take 344 first--it makes this class much easier.",
      "The first program is easy. The second program is much harder than the first, so don't underestimate it. CS 372 is like Assembly except with extra help on exams (no credit quiz reviews!) and less coding. ",
      "The projects are crazy involved!  There are discussions each week - do them, they are easy points!  Very similar structure to 271.  ",
      "Use the exercises to prepare for tests",
      "Start the assignments EARLY! This class is structured like CS271, so take the Summary Exercises and Lecture Exercises seriously.",
      "This course is organized the same way 271 is. I found the content to be easier, but challenging. This class should be taken after 344 as currently 344 has socket programming assignments and completing those before the class will make it significantly easier.\n\n\nThis is one of the best designed classes in the program. Expect workload to be even and constant - like 271 there are no surprises. I took this class by itself in the summer.",
      "This term was the first one using Java instead of C, so the hardest part at the start of the class was getting familiar with Java since it is not taught in the intro classes anymore.  The class teaches about testing, so you do not have to write functioning programs, you have to test ones that should be functioning.",
      "Like the other Redfield/Paulson class (assembly), this class is similar in structure and has tons of information.  You can use notes on the exam, but be prepared to cram lots of information on it.  I'd advise taking 344 before this because the last project in 344 has a lot of code which can be reused for this class' projects.",
      "Reading isn't required but you will have to do some googling on things not completely covered. I lucked out and had a very active weekly discussion group which contributed to my learning immensely so if that doesn't happen be the one to ask questions!",
      "There's a lot of memorization.  The weekly summaries require a bit more digging than the summaries did in 271."
    ],
    "difficulty":[
      3,
      3,
      3,
      3,
      3,
      4,
      3,
      4,
      3,
      2,
      3,
      3,
      3,
      3
    ],
    "timeSpent":[
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "18+ hours",
      "18+ hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "0-5 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours"
    ]
  },
  "CS419":{
    "fullName":"CS 419 - Software Projects",
    "tips":[
      "Fairly light work, but you need to get on things early. Pick the project you are most passionate about and run with it. ",
      "This course is about what you expect. A quarter long group project with fairly high expectations on the total content your group delivers. You're graded subjectively on the final product which means individual grades/contributions aren't as important. Establishing a solid group dynamic where everyone contributes and does a good job is key to success. Brewster is a great mediator and is very practical though, so don't be discouraged. Definitely doable in Summer if you put in ~10 hours a week and keep on schedule.",
      "Make a really good design plan do you stay on track. Communicate with your team regularly",
      "This is not a class to slack in -- get as much done as early as possible. Be sure to be on your teammates to get stuff done. ",
      "The real lesson you learn in this course is group management and working together. Keep constant communication with your groupmates! If you're having a problem, reach out as soon as possible to your team members of the class.",
      "I spent 10 hours a week on the capstone project - work diligently and it isn't a big deal!  Try to have a group picked out ahead of time so you keep the group drama to a minimum.  ",
      "Go into this class with groupmates you know will work well.",
      "The class is really open ended and Brewster is very encouraging. Enjoy it and create something for the resume!"
    ],
    "difficulty":[
      3,
      4,
      2,
      3,
      4,
      2,
      4,
      1
    ],
    "timeSpent":[
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "18+ hours",
      "6-12 hours"
    ]
  },
  "CS165":{
    "fullName":"CS 165 - Intro to Computer Science (Accelerated)",
    "tips":[
      "Work ahead.  Read the text (it's very good).  Start the programming homework assignments early, those are the biggest portion of your grade.  Make sure that your code compiles and runs on the FLIP server, it doesn't matter if it runs on your home computer.  If it doesn't run on FLIP, you will get little or no credit.  Also turning in an unfinished project on time is better than missing the deadline completely.",
      "- Alcon likes to ask \"gotcha!\" questions on the exams.  Be prepared to parse and pay close attention to simple, but tricky questions.",
      "The workload is decent, be prepared to read chapters or familiar with sample codes from textbooks. Usually every week covers 2 chapters. \n\nRead w/ Video materials, you will find the hw is alright.\n\nBe aware of more reading materials in the first four weeks.\n\nThe Professor is always on the Piazza, usually take him 30 mins to response, if you got questions on your codes.\n\nMost TA are reasonable with grading.\n\n"
    ],
    "difficulty":[
      3,
      3,
      2,
      3
    ],
    "timeSpent":[
      "6-12 hours",
      "6-12 hours",
      "6-12 hours",
      "13-18 hours"
    ]
  },
  "CS344":{
    "fullName":"CS 344 - Operating Systems",
    "tips":[
      "I'm not really sure why this class has such a rep for being difficult.  The course grade is a syllabus quiz, 4 programs, and a final; that's it.  While the lectures do not hand everything to you to complete the assignments and you will need to do some research, it is more than enough to point you into the right direction  \n\nThe grading scripts are provided for all assignments but 1; this is usually ~90% of your grade.  The remaining 10%ish is from your code style and comments.  Comment a lot and keep notes on what references you used.  Probably due to the class size and the automated nature of grading, feedback is minimal and grading seems to be extremely lenient, which is unfortunate if you are looking for helpful feedback where you can improve.  Overall, the class is as straightforward as can be without doing all the legwork for you, but programs might take extra time if you don't understand the content.\n\nThe lecture about zombie processes is mildly embarrassing to watch; try not to cringe too much.",
      "Start the programs EARLY!  Do not fall behind!  Brewster is a fantastic teacher, ask him questions.  ",
      "Get started early and brush up on your C programming. The lectures do a good job of giving you the tools you need for each project but there will still be C related programming that the textbook can fulfill for you.",
      "The projects may look easy, but they are harder than they first appear. Don't wait a day or two before its due.",
      "It's very challenging and you need to put in the time on the projects. START THE PROJECTS EARLY or you're gonna be screwed. Brewster is the best professor there is and this is probably the best/funnest course in this program. ",
      "As everyone will tell you start the projects as early as possible",
      "Start the projects early. They are involved so give yourself time to really absorb the lecture material and do lots of Googling. Professor Brewster is very involved and supportive, and the final seemed very fair.",
      "This course was challenging but doable. Like everyone said, start the projects early. I had to turn in one project late because the entire weekend was not enough time. Brewster is the best professor and this is by far the best course of the program. ",
      "Start your projects early. Some of the projects can seem overwhelming, so break them up into doable chunks and work steadily on one or two pieces a day.  Try to finish each project at least a week before it's due, so that if you misjudge your ability to complete all the requirements, you'll have the time you need to finish.",
      "There is a lot of lecture content, so what it early otherwise you wont have enough time for the projects.  The projects are large but the requirements provided are detailed.  Just code towards passing the grading scripts - don't worry about extra features.  Take advantage of the Slack room (details are on the subreddit) because Brewster is active in there in addition to Piazza",
      "Enjoy Brewster's teaching!  He's great.  Assignments take a long time, but you are given everything you need to complete them successfully."
    ],
    "difficulty":[
      1,
      4,
      3,
      4,
      4,
      4,
      3,
      3,
      4,
      2,
      3
    ],
    "timeSpent":[
      "0-5 hours",
      "13-18 hours",
      "6-12 hours",
      "6-12 hours",
      "18+ hours",
      "13-18 hours",
      "13-18 hours",
      "13-18 hours",
      "18+ hours",
      "13-18 hours",
      "13-18 hours"
    ]
  },
  "CS464":{
    "fullName":"CS 464 - Open Source Software",
    "tips":[
      "Don't really need to do more than skim the readings and watch the short videos.  Just write more than you think you should and you can probably get an easy A.  Include a little material from the readings/lectures and you should be golden.  Find a project you want to work on early and start getting familiar with it.",
      "This course was very light. The biggest thing for me was choosing a project to work on. That was a little intimidating, but once I choose one I was good. I would also recommend choosing an active project so you have other people to talk about the project with. This class would be really easy to pair with a more involved course, I wish it wasn't the only class that I took.",
      "Take this class if you just want to get 4 elective credits and want to spend as little time as possible doing work. Its not really worth the tuition cost but if you just want credits to graduate, its worth it.",
      "Get your homework done on time and it will be super easy to get an A."
    ],
    "difficulty":[
      1,
      1,
      1,
      1
    ],
    "timeSpent":[
      "0-5 hours",
      "0-5 hours",
      "0-5 hours",
      "0-5 hours"
    ]
  },
  "CS373":{
    "fullName":"CS 373 - Defense Against the Dark Arts",
    "tips":[
      "-The course consists mainly of weekly writeups (in the form of blog posts) of the previous weeks materials (week 3 writeup is on week 2 material). The 1st assignment was like a proper lab submission and there was a single graded discussion post and then we just did writeups for the rest of the term. Basically each week there is about 1-2 labs worth of work to complete and then you make a blog post about what you did, what you learned, anything interesting you found and submit a URL to that post. Yeah, that is pretty vague instructions but that's the nature of this class. I would do a writeup of the portion of the lab(s) that I was able to complete for that week and include a bunch of screenshots and commands I used. Sometimes I was not able to get through all of the labs but I still received full credit on my writeups. The Final consisted of recording a ~30 min presentation on a cybersecurity issue of your choice.\n-You get as much out of this class as you want. The professor is a ghost. If you are interested in CyberSecurity you have the opportunity to learn a lot, sort of an intro to many different areas of cybersecurity. If you don't give a shit, you can half-ass the writeups and still do fine. I thought the lectures were very interesting and different from the usual OSU format. They were all guest lecturers, different security professionals, most of whom worked at Intel Security and the videos are of the actual lectures given on campus. As a result, there is quite a lot of lecture video each week (about 1-2 hours) where they discuss the materials as well as go over the labs. I only thought the last one on Mobile Security kinda sucked, the rest I enjoyed. If you are interested in the material, and not OCD anal retentive when it comes to instructions or prompt grading (we received grades only 3 times the whole quarter, in week 8 covering weeks 1-7, week 10 covering weeks 7-9, and the final grade), I think you will enjoy this class because it is a class where you can learn a lot AND that is low stress at the same time. I think that is rare in this program. \n-McGrath is sometimes not clear with his instructions and is stubborn. Ask for clarification on the forums if you don't understand something. Some students may be tempted to offer reasonable suggestions for improvements (such as using a single place to post all course information rather than multiple websites or posting all TEACH submission links at the start of the term). He will not listen to you. Regardless, there is NO POINT in being argumentative with him on Piazza. This class is very easy and all you are doing is poking a sleeping bear. \n-TopHat is the \"textbook\" for this class. It's basically the equivalent of Canvas where videos and assignment due dates are posted. He will not allow students to download the videos. There is no point in paying for the year long access because you won't have access to the Virtual Machines so just choose the cheapest option which was the quarter long access for $60.\n"
    ],
    "difficulty":[
      1
    ],
    "timeSpent":[
      "6-12 hours"
    ]
  },
  "CS475":{
    "fullName":"CS 475 - Intro to Parallel Programming",
    "tips":[
      "The projects are pretty easy just be sure to know the why behind the results. This is probably the most interesting course I took. You can tell Bailey is passionate about the subject which helps keep you engaged."
    ],
    "difficulty":[
      2
    ],
    "timeSpent":[
      "6-12 hours"
    ]
  }
}